{"version":3,"file":"static/js/133.843bea64.chunk.js","mappings":"gNAeA,EAZiB,SAAC,GAA4B,IAA1BA,EAAyB,EAAzBA,SACZC,EADqC,EAAfC,SACFC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,GAAIC,EAArB,EAAqBA,KAArB,OAC5B,gBAAaC,MAAO,CAAEC,WAAYF,EAAO,OAAS,UAAlD,WACE,cAAGG,UAAWC,EAAAA,EAAAA,YAAd,SAAmCP,KACnC,cAAGM,UAAWC,EAAAA,EAAAA,YAAd,SAAmCN,KACnC,mBAAQO,QAAS,kBAAMZ,EAASM,EAAf,EAAjB,sBAHOA,EADmB,IAQ9B,OAAO,wBAAKL,GACb,ECSD,EAnBe,SAAC,GAA+B,IAA7BY,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MAChC,OACE,iCACE,cAAGJ,UAAWC,EAAAA,EAAAA,KAAd,oCACA,kBACEI,SAAUF,EACVH,UAAWC,EAAAA,EAAAA,MACXK,YAAY,kBACZC,KAAK,OACLb,KAAK,SACLU,MAAOA,EACPI,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,MAIf,E,6BCIYC,EAAsB,SAAC,GAAwB,IAAvBnB,EAAsB,EAAtBA,SAAUoB,EAAY,EAAZA,OAC3C,IAAKpB,IAAaA,EAASqB,MACvB,MAAO,GAEX,IAAKD,EACD,OAAOpB,EAASqB,MAEpB,IAAMC,EAAmBF,EAAOG,cAIhC,OAHevB,EAASqB,MAAMD,QAAO,YACjC,OAD+C,EAAXlB,KACxBqB,cAAcC,SAASF,EACtC,GAEJ,ECpCYG,EAAY,SAAAC,GAAK,OAAIA,EAAMN,MAAV,ECkC9B,EA1BqB,WACnB,IAAMO,GAAWC,EAAAA,EAAAA,MAKXC,GAAmBC,EAAAA,EAAAA,IAAYX,GAE/BC,GAASU,EAAAA,EAAAA,IAAYL,GAMrBM,EAAaC,QAAQH,EAAiBI,QAC5C,OACE,iCACE,SAAC,EAAD,CAAQtB,eAPW,SAAC,GAAgB,IAAduB,EAAa,EAAbA,OACxBP,GAASQ,EAAAA,EAAAA,GAAUD,EAAOtB,OAC3B,EAK2CA,MAAOQ,IAC9CW,IACC,SAAC,EAAD,CAAU/B,SAAU6B,EAAkB/B,SAhB3B,SAAAM,GACfuB,GAASS,EAAAA,EAAAA,IAAoBhC,GAC9B,KAgBK2B,IAAc,yEAGrB,C,qBC/BD,KAAgB,QAAU,2BAA2B,MAAQ,yBAAyB,SAAW,4BAA4B,MAAQ,yBAAyB,aAAe,gCAAgC,MAAQ,yBAAyB,KAAO,wBAAwB,YAAc,+BAA+B,OAAS,0B","sources":["components/Contacts.jsx","components/Filter.jsx","redux/contacts/contacts-selectors.js","redux/filter/filter-selectors.js","pages/ContactsPage.jsx","webpack://goit-react-hw-08-phonebook/./src/components/phoneBook.module.css?acd4"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styles from '../components/phoneBook.module.css';\n\nconst Contacts = ({ onDelete, contacts }) => {\n  const elements = contacts.map(({ name, number, id, main }) => (\n    <li key={id} style={{ fontWeight: main ? 'bold' : 'normal' }}>\n      <p className={styles.nameContact}>{name}</p>\n      <p className={styles.nameContact}>{number}</p>\n      <button onClick={() => onDelete(id)}>Delete</button>\n    </li>\n  ));\n\n  return <ol>{elements}</ol>;\n};\n\nexport default Contacts;\n\nContacts.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      // number: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      // main: PropTypes.bool.isRequired,\n    })\n  ),\n};\n","import PropTypes from 'prop-types';\nimport styles from '../components/phoneBook.module.css';\n\nconst Filter = ({ onChangeFilter, value }) => {\n  return (\n    <>\n      <p className={styles.name}>Find contacts by name</p>\n      <input\n        onChange={onChangeFilter}\n        className={styles.input}\n        placeholder=\"Name of contact\"\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  onChangeFilter: PropTypes.func.isRequired,\n};\n","export const getAllContacts = ({contacts}) => contacts.items;\n\n// export const getMainContacts = ({contacts}) => {\n// const mainСontacts = contacts.items.filter(({ main }) => main);\n//     return mainСontacts;\n// }\n// export const getFilteredContacts = ({contacts, filter}) => {\n//     if (!filter) {\n//        console.log(contacts.items)\n//     }\n//     const normalizedFilter = filter.toLowerCase();\n//     const result = contacts.items.filter(({ name }) => {\n//         return name.toLowerCase().includes(normalizedFilter);\n//     });\n//     return result;\n// }\nexport const getMainContacts = ({contacts}) => {\n    if (!contacts || !contacts.items) {\n        return [];\n    }\n    const mainContacts = contacts.items.filter(({ main }) => main);\n    return mainContacts;\n}\n\nexport const getFilteredContacts = ({contacts, filter}) => {\n    if (!contacts || !contacts.items) {\n        return [];\n    }\n    if (!filter) {\n        return contacts.items\n    }\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.items.filter(({ name }) => {\n        return name.toLowerCase().includes(normalizedFilter);\n    });\n    return result;\n}","export const getFilter = store => store.filter;\n","import Contacts from '../components/Contacts';\nimport Filter from '../components/Filter';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchDeleteContacts } from 'redux/contacts/contacts-operations';\nimport { setFilter } from '../redux/filter/filter-slice';\nimport { getFilteredContacts } from '../redux/contacts/contacts-selectors';\nimport { getFilter } from '../redux/filter/filter-selectors';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  const onDelete = id => {\n    dispatch(fetchDeleteContacts(id));\n  };\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  const filter = useSelector(getFilter);\n\n  const onChangeFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  const isContacts = Boolean(filteredContacts.length);\n  return (\n    <>\n      <Filter onChangeFilter={onChangeFilter} value={filter} />\n      {isContacts && (\n        <Contacts contacts={filteredContacts} onDelete={onDelete} />\n      )}\n      {!isContacts && <p>There are no contacts in your Phone Book...</p>}\n    </>\n  );\n};\n\nexport default ContactsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"phoneBook_section__82jdA\",\"input\":\"phoneBook_input__gvWDW\",\"checkbox\":\"phoneBook_checkbox__f9sj6\",\"block\":\"phoneBook_block__BVEEw\",\"blockContact\":\"phoneBook_blockContact__7jJT1\",\"title\":\"phoneBook_title__RUn34\",\"name\":\"phoneBook_name__e2DPy\",\"nameContact\":\"phoneBook_nameContact__K3frU\",\"button\":\"phoneBook_button__nB+gh\"};"],"names":["onDelete","elements","contacts","map","name","number","id","main","style","fontWeight","className","styles","onClick","onChangeFilter","value","onChange","placeholder","type","pattern","title","required","getFilteredContacts","filter","items","normalizedFilter","toLowerCase","includes","getFilter","store","dispatch","useDispatch","filteredContacts","useSelector","isContacts","Boolean","length","target","setFilter","fetchDeleteContacts"],"sourceRoot":""}